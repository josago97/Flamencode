# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Publish console app

# Declaring custom variables
env:
  PROJECT_NAME: Flamencode
  WINDOWS_RUNTIME: winx64
  WINDOWS_FOLDER: Windows-x64
  MACOS_RUNTIME_X64: osx-x64
  MACOS_FOLDER_X64: MacOS-x64
  MACOS_RUNTIME_ARM: osx-arm
  MACOS_FOLDER_ARM: MacOS-arm
  LINUX_RUNTIME: linux-x64
  LINUX_FOLDER_ARM: a
  RELEASE_FOLDER: release
  OPERATIVE_SYSTEM_RUNTIMES: win-x64 osx-x64 linux-x64
  OPERATIVE_SYSTEM_FOLDERS: Windows64 Macos64 Linux64
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ABC: '["hola", "mundo"]'
  ABCD: '("hola" "mundo")'
  MY_ARRAY: "valor1,valor2,valor3"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '1.0.0'

jobs:
  build:
    # use ubuntu-latest image to run steps on
    runs-on: ubuntu-latest
    
    steps:
    # uses GitHub's checkout action to checkout code form the master branch
    - uses: actions/checkout@v3 
    
    - name: Prueba
      run: |
        IFS=',' read -ra e <<< "${{ env.MY_ARRAY }}"
        echo "${e[@]}"
        for (( i=0; i<${#e[@]}; i+=2 )); do
          a=${e[i]}
          b=${e[i+1]}
          echo "a=$a, b=$b"
        done
        
    # Build project to the release-folder
    - name: Build .NET Project
      run: |
        IFS=' ' read -ra runtimes <<< "${{ env.OPERATIVE_SYSTEM_RUNTIMES }}"
        IFS=' ' read -ra folders <<< "${{ env.OPERATIVE_SYSTEM_FOLDERS }}"
        releaseFolder=${{env.RELEASE_FOLDER}}
        for (( i=0; i<${#runtimes[@]}; i+=2 )); do
          runtime=${runtimes[i]}
          folder=${releaseFolder}/${folders[i]}
          dotnet publish $PROJECT_NAME/$PROJECT_NAME.csproj -r $runtime -c Release -o $folder --nologo --self-contained true /p:PublishSingleFile=true /p:DebugType=None /p:DebugSymbols=false
          zip -r ${folder}.zip $folder
        done
        cd $releaseFolder
        ls
    
    - name: Create release
      run: |
        assets=()
        for asset in ./*.zip; do
          assets+=("-a" "$asset")
        done
        tag_name=v${{ github.event.inputs.version }}
        hub release create "${assets[@]}" -m "$tag_name" "$tag_name"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      

          

